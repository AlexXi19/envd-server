// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package query

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  identity_token, public_key
) VALUES (
  $1, $2
)
RETURNING id, identity_token, public_key
`

type CreateUserParams struct {
	IdentityToken string `json:"identity_token"`
	PublicKey     []byte `json:"public_key"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.IdentityToken, arg.PublicKey)
	var i User
	err := row.Scan(&i.ID, &i.IdentityToken, &i.PublicKey)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAuthor, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, identity_token, public_key FROM users
WHERE identity_token = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, identityToken string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, identityToken)
	var i User
	err := row.Scan(&i.ID, &i.IdentityToken, &i.PublicKey)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, identity_token, public_key FROM users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.IdentityToken, &i.PublicKey); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
